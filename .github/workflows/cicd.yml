name: cicd
on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: [ 8.0, 8.1 ]
    env:
      DB_DATABASE: blog_tests
      DB_USERNAME: root
      DB_PASSWORD: password
      BROADCAST_DRIVER: log
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
      MAIL_MAILER: smtp
      MAIL_HOST: smtp.mailtrap.io
      MAIL_PORT: 2525
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      MAIL_ENCRYPTION: tls
      MAIL_FROM_ADDRESS: from@example.com
      SCOUT_PREFIX: dev_posts
      ALGOLIA_APP_ID: ${{ secrets.ALGOLIA_APP_ID }}
      ALGOLIA_SECRET: ${{ secrets.ALGOLIA_SECRET }}

    name: php-version-${{ matrix.php }}-test

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: blog_tests
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis
        ports:
          - 6379/tcp
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Docs: https://github.com/shivammathur/setup-php
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          # https://laravel.com/docs/9.x/deployment#server-requirements
          extensions: bcmatch, ctype, curl, dom, fileinfo, json, mbstring, openssl, pcre, pdo, tokenizer, xml, redis
          coverage: xdebug

      - name: Start mysql service
        run: sudo systemctl start mysql

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Prepare the application
        run: |
          php -r "file_exists('.env') || copy('.env.example', '.env');"
          php artisan key:generate

      - name: Run Migration
        run: php artisan migrate -v
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}
          REDIS_PORT: ${{ job.services.redis.ports['6379'] }}

      - name: Test with pest
        run: vendor/bin/pest --coverage
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}
          REDIS_PORT: ${{ job.services.redis.ports['6379'] }}

  create-deployment-artifacts:
    runs-on: ubuntu-latest
    name: Create deployment artifacts
    needs: tests
    steps:
      - uses: actions/checkout@v3

      - name: Complie CSS and JavaScript
        run: |
          npm install
          npm run prod

      - name: Configure PHP 8.1
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1
          extensions: bcmatch, ctype, curl, dom, fileinfo, json, mbstring, openssl, pcre, pdo, tokenizer, xml, redis
          coverage: none

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader --no-dev

      - name: Create deployment artifact
        run: tar -czf "${{ github.sha }}.tar.gz" --exclude=.git --exclude=node_modules *

      - name: Store artifact for distribution
        uses: actions/upload-artifact@v3
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz

  deploy-to-server:
    runs-on: ubuntu-latest
    name: Deploy to server
    needs: create-deployment-artifacts
    env:
      ARTIFACTS_PATH: /var/www/blog/artifacts
      RELEASE_PATH: /var/www/blog/release
      APP_PATH: /var/www/blog/current
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: app-build

      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          username: ${{ secrets.SSH_USERNAME }}
          source: ${{ github.sha }}.tar.gz
          target: ${{ env.ARTIFACTS_PATH }}

      - name: Active release
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          username: ${{ secrets.SSH_USERNAME }}
          script: |
            # extract to release dir
            mkdir ${{ env.RELEASE_PATH }}/${{ github.sha }}
            tar -xzf ${{ env.ARTIFACTS_PATH }}/${{ github.sha }}.tar.gz -C ${{ env.RELEASE_PATH }}/${{ github.sha }}

            # make env file
            printf "%s" '${{ secrets.BLOG_ENV }}' > "${{ env.RELEASE_PATH }}/${{ github.sha }}/.env"

            # change soft link to new version application
            sudo -u www-data ln -sfn ${{ env.RELEASE_PATH }}/${{ github.sha }} ${{ env.APP_PATH }}

            # change application permission
            sudo chown -R www-data:www-data ${{ env.APP_PATH }}/

            # optimize laravel application
            cd ${{ env.APP_PATH }}
            sudo -u www-data php artisan view:cache
            sudo -u www-data php artisan config:cache
            sudo -u www-data php artisan route:cache

            # restart web server process
            sudo supervisorctl restart all

            # keep the latest 6 artifacts and release file, and remove the others
            cd ${{ env.ARTIFACTS_PATH }} && ls -t -1 | tail -n +6 | xargs sudo rm -rf
            cd ${{ env.RELEASE_PATH }} && ls -t -1 | tail -n +6 | xargs sudo rm -rf
