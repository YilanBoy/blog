service: docfunc

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: us-west-2
  httpApi:
    disableDefaultEndpoint: true
  architecture: arm64
  layers:
    - arn:aws:lambda:us-west-2:154471991214:layer:us_west_2_rds_cert:1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource:
            - arn:aws:s3:::${ssm:/docfunc/${opt:stage, 'dev'}/aws-bucket}/*
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: !GetAtt CacheTable.Arn
  # CloudWatch log settings
  logRetentionInDays: 1

  environment:
    # App settings
    APP_NAME: DocFunc
    APP_ENV: production # Or use ${sls:stage} if you want the environment to match the stage
    APP_KEY: ${ssm:/docfunc/${opt:stage, 'dev'}/app-key}
    APP_DEBUG: false
    APP_URL: ${ssm:/docfunc/${opt:stage, 'dev'}/app-url}
    APP_TIMEZONE: Asia/Taipei
    APP_LOCALE: zh_TW
    ASSET_URL: ${ssm:/docfunc/${opt:stage, 'dev'}/asset-url}
    # Database
    DB_CONNECTION: mysql
    DB_HOST: ${ssm:/docfunc/${opt:stage, 'dev'}/database-host}
    DB_PORT: ${ssm:/docfunc/${opt:stage, 'dev'}/database-port}
    DB_DATABASE: ${ssm:/docfunc/${opt:stage, 'dev'}/database-name}
    DB_USERNAME: ${ssm:/docfunc/${opt:stage, 'dev'}/database-username}
    DB_PASSWORD: ${ssm:/docfunc/${opt:stage, 'dev'}/database-password}
    MYSQL_ATTR_SSL_CA: /opt/us-west-2-bundle.pem
    # Cache
    CACHE_STORE: dynamodb
    DYNAMODB_CACHE_TABLE: !Ref CacheTable
    # Session
    SESSION_DRIVER: dynamodb
    SESSION_LIFETIME: 120 # minutes
    # Queue
    QUEUE_CONNECTION: sqs
    SQS_QUEUE: ${construct:jobs.queueUrl}
    # Filesystem
    FILESYSTEM_DISK: s3
    AWS_BUCKET: ${ssm:/docfunc/${opt:stage, 'dev'}/aws-bucket}
    AWS_URL: ${ssm:/docfunc/${opt:stage, 'dev'}/aws-url}
    AWS_USE_PATH_STYLE_ENDPOINT: false
    # CAPTCHA
    CAPTCHA_SITE_KEY: ${ssm:/docfunc/${opt:stage, 'dev'}/captcha-site-key}
    CAPTCHA_SECRET_KEY: ${ssm:/docfunc/${opt:stage, 'dev'}/captcha-secret-key}
    # Mail
    MAIL_MAILER: smtp
    MAIL_HOST: smtp.sendgrid.net
    MAIL_PORT: 587
    MAIL_USERNAME: apikey
    MAIL_PASSWORD: ${ssm:/docfunc/${opt:stage, 'dev'}/sendgrid-api-key}
    MAIL_ENCRYPTION: tls
    MAIL_FROM_ADDRESS: "no-reply@mail.docfunc.com"
    MAIL_FROM_NAME: "DocFunc"
    # Scout
    SCOUT_PREFIX: ${ssm:/docfunc/${opt:stage, 'dev'}/scout-prefix}
    ALGOLIA_APP_ID: ${ssm:/docfunc/${opt:stage, 'dev'}/algolia-app-id}
    ALGOLIA_SECRET: ${ssm:/docfunc/${opt:stage, 'dev'}/algolia-secret}

package:
  # Files and directories to exclude from deployment
  patterns:
    - '!node_modules/**'
    - '!public/storage'
    - '!resources/assets/**'
    - '!storage/**'
    - '!tests/**'
    - '!.env'

resources:
  Resources:
    CacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions: # only keys are defined here, other attributes are dynamic
          - AttributeName: id # adds a mandatory id field
            AttributeType: S # the type of id is a string
        BillingMode: PAY_PER_REQUEST # billed for each request instead of paying for a constant capacity
        TimeToLiveSpecification: # deletes cache keys automatically based on a ttl field which contains a timestamp
          AttributeName: ttl
          Enabled: true
        KeySchema:
          - AttributeName: id
            KeyType: HASH # the type of key, HASH means partition key (similar to primary keys in SQL)

functions:
  web:
    handler: Bref\LaravelBridge\Http\OctaneHandler
    runtime: php-83
    environment:
      BREF_LOOP_MAX: 250
      OCTANE_PERSIST_DATABASE_SESSIONS: 1

  artisan:
    handler: artisan
    runtime: php-83-console
    timeout: 720 # in seconds
    events:
      - schedule:
          rate: rate(1 hour)
          input: '"schedule:run"'

constructs:
  jobs:
    type: queue
    worker:
      handler: Bref\LaravelBridge\Queue\QueueHandler
      runtime: php-83
      timeout: 60 # in seconds
      layers:
        - arn:aws:lambda:us-west-2:154471991214:layer:us_west_2_rds_cert:1

plugins:
  - ./vendor/bref/bref
  - serverless-lift
  - serverless-api-gateway-throttling

custom:
  apiGatewayThrottling:
    maxRequestsPerSecond: 500
    maxConcurrentRequests: 500
